/*

    {{ warn }}

    Domain: {{ domain.name }}
{% if 'desc' in domain %}
    Description: {{ domain.desc }}
{% endif %}
*/

#pragma once

#include <iostream>
#include <string>
#include <vector>
#include <optional>
#include <chrono>
#include <sstream>
#include <iomanip>

namespace loglab_{{ domain.name }}
{
    class LogSerializer {
    public:
        static thread_local std::stringstream ss;
        static thread_local std::string buffer;
        static thread_local char datetime_buffer[32];

        static std::string& SerializeToBuffer(const std::string& content) {
            ss.clear();
            ss.str("");
            ss << content;
            buffer = ss.str();
            return buffer;
        }

        static const char* FormatDateTime() {
            auto now = std::chrono::system_clock::now();
            auto in_time_t = std::chrono::system_clock::to_time_t(now);
            auto microseconds = std::chrono::duration_cast<std::chrono::microseconds>(now.time_since_epoch()) % 1000000;

            std::tm* tm_utc = std::gmtime(&in_time_t);
            int len = std::sprintf(datetime_buffer, "%04d-%02d-%02dT%02d:%02d:%02d.%06ldZ",
                tm_utc->tm_year + 1900, tm_utc->tm_mon + 1, tm_utc->tm_mday,
                tm_utc->tm_hour, tm_utc->tm_min, tm_utc->tm_sec,
                microseconds.count());

            return datetime_buffer;
        }
    };

    // Thread-local static member definitions
    thread_local std::stringstream LogSerializer::ss;
    thread_local std::string LogSerializer::buffer;
    thread_local char LogSerializer::datetime_buffer[32];

{% for name, elst in events.items() %}
{% set edata = elst[-1] %}
{% set edef = edata[1] %}
    /// <summary>
    ///  {{ edef.desc }}
    /// </summary>
    class {{ name }}
    {
    public:
        static constexpr const char* Event = "{{ name }}";

        // Required fields
{% for fname, flst in (edef.fields|required).items() %}
{% set fdata = flst[-1] %}
{% set fdef = fdata[1] %}
        // {{ fdef.desc }}
        {{ type(fdef) }} {{ fname }};
{% endfor %}

        // Optional fields
{% for fname, flst in (edef.fields|optional).items() %}
{% set fdata = flst[-1] %}
{% set fdef = fdata[1] %}
        // {{ fdef.desc }}
        std::optional<{{ type(fdef) }}> {{ fname }};
{% endfor %}

        {{ name }}() {}

        {{ name }}({% for fname, flst in (edef.fields|required).items() %}{% set fdata = flst[-1] %}{% set fdef = fdata[1] %}{{ type(fdef) }} _{{ fname }}{% if not loop.last %}, {% endif %}{% endfor %})
        {
            reset({% for fname, flst in (edef.fields|required).items() %}_{{ fname }}{% if not loop.last %}, {% endif %}{% endfor %});
        }

        void reset({% for fname, flst in (edef.fields|required).items() %}{% set fdata = flst[-1] %}{% set fdef = fdata[1] %}{{ type(fdef) }} _{{ fname }}{% if not loop.last %}, {% endif %}{% endfor %})
        {
{% for fname, flst in (edef.fields|required).items() %}
            {{ fname }} = _{{ fname }};
{% endfor %}
{% for fname, flst in (edef.fields|optional).items() %}
            {{ fname }}.reset();
{% endfor %}
        }

        std::string& serialize()
        {
            LogSerializer::ss.clear();
            LogSerializer::ss.str("");
            LogSerializer::ss << "{";

            // DateTime and Event
            LogSerializer::ss << "\"DateTime\":\"" << LogSerializer::FormatDateTime() << "\",";
            LogSerializer::ss << "\"Event\":\"" << Event << "\"";

            // Required fields
{% for fname, flst in (edef.fields|required).items() %}
{% set fdef = flst[-1][1] %}
            LogSerializer::ss << ",";
            LogSerializer::ss << "\"{{ fname }}\":";
{% if type(fdef) == 'std::string' %}
            LogSerializer::ss << "\"" << {{ fname }} << "\"";
{% elif type(fdef) == 'bool' %}
            LogSerializer::ss << ({{ fname }} ? "true" : "false");
{% else %}
            LogSerializer::ss << {{ fname }};
{% endif %}
{% endfor %}

            // Optional fields
{% for fname, flst in (edef.fields|optional).items() %}
{% set fdef = flst[-1][1] %}
            if ({{ fname }}.has_value())
            {
                LogSerializer::ss << ",";
                LogSerializer::ss << "\"{{ fname }}\":";
{% if type(fdef) == 'std::string' %}
                LogSerializer::ss << "\"" << {{ fname }}.value() << "\"";
{% elif type(fdef) == 'bool' %}
                LogSerializer::ss << ({{ fname }}.value() ? "true" : "false");
{% else %}
                LogSerializer::ss << {{ fname }}.value();
{% endif %}
            }
{% endfor %}

            // Const fields
{% for fname, finfo in (edef.fields|const).items() %}
            LogSerializer::ss << ",";
            LogSerializer::ss << "\"{{ fname }}\":";
{% set ftype = finfo[0] %}
{% set fval = finfo[1] %}
{% if ftype == 'string' %}
            LogSerializer::ss << "\"" << {{ fval }} << "\"";
{% else %}
            LogSerializer::ss << {{ fval }};
{% endif %}
{% endfor %}

            LogSerializer::ss << "}";
            LogSerializer::buffer = LogSerializer::ss.str();
            return LogSerializer::buffer;
        }
    };
{% endfor %}
}
